{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "Buzz",
    "patterns": [
        {
			"begin": "^\\w*\\b(include)\\b",
			"beginCaptures": {
				"0": {
					"name": "keyword.other.import.buzz"
				}
			},
			"end": "\\n",
			"name": "meta.declaration.buzz",
			"patterns": [
				{
					"include": "#strings"
				},
				{
					"include": "#comments"
				}
			]
		},
        {
            "include": "#comments"
        },
        {
            "include": "#constants"
        },
        {
            "include": "#keywords"
        },
        {
            "include": "#variables"
        },
        {
            "include": "#strings"
        }
    ],
    "repository": {
        "comments": {
            "patterns": [
                {
                    "name": "comment.line",
                    "begin": "#",
                    "end": "\n"
                }
            ]
        },
        "constants": {
            "patterns": [
                {
                    "name": "constant.language.buzz",
                    "match": "(?<!\\#)\\b(true|false|nil)\\b"
                },
                {
                    "name": "constant.numeric.buzz",
                    "match": "(?<!\\#)(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))\\b"
                },
                {
                    "match": "(?<!\\#)\\b(function\\s+)([_]*[a-zA-Z][a-zA-Z0-9_]*)?(\\()",
                    "captures": {
                        "1":{
                            "name": "storage.type.buzz"
                        },
                        "2": {
                            "name": "entity.name.function.buzz"
                        }
                    }
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.buzz",
                    "match": "(?<!\\#)\\b(else|for|if|return|while)\\b"
                },
                {
                    "name": "keyword.control.buzz",
                    "match": "(?<!\\#)\\b(break|continue)\\b"
                },
                {
                    "name": "keyword.operator.buzz",
                    "match": "(?<!\\#)\\b(!|and|or)\\b"
                },
                {
					"name": "keyword.operator.comparison.buzz",
					"match": "(?<!\\#)(==|!=|<=?|>=?)"
				},
                {
                    "match": "(?<!\\#)([_]*[a-zA-Z][a-zA-Z0-9_]*)(\\()",
                    "captures": {
                        "1": {
                            "name": "entity.name.function.buzz"
                        }
                    }
                },

                {
					"name": "keyword.operator.assignment.arithmetic.buzz",
					"match": "(?<!\\#)(([+*/%-]|\\~)=)"
				},
                {
					"name": "keyword.operator.assignment.buzz",
					"match": "(?<!\\#)(=)"
				},
                {
					"name": "keyword.operator.arithmetic.buzz",
					"match": "(\\-|\\+|\\*|\\/|\\~\\/|%)"
				}
            ]
        },
        "variables": {
            "patterns": [
                {
                    "match": "(?<!\\#)\\b(var\\s+)([_]*[a-zA-Z][a-zA-Z0-9_]*)((\\s*(=)\\s*)([_]*[a-zA-Z][a-zA-Z0-9_]*))?\\b",
                    "captures": {
                        "1":{
                            "name": "storage.type.buzz"
                        },
                        "2": {
                            "name": "variable.other.readwrite.buzz"
						}
					}
                },
                {
                    "match": "(?<!\\#)\\b([_]*[a-zA-Z][a-zA-Z0-9_]*)\\b",
                    "name": "variable.other.readwrite.buzz"
                }
            ]
        },
        "strings": {
            "name": "string.quoted.double.buzz",
            "begin": "\"",
            "end": "\"",
            "patterns": [
                {
                    "name": "constant.character.escape.buzz",
                    "match": "\\\\."
                }
            ]
        }
    },
    "scopeName": "source.bzz"
}